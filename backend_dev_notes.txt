

This file serves as a place to store design notes and issues, and some useful URLs for backend testing, as well as a
bit of a description of expected behaviour. 

So far, I've worked on implementing the card selection and voting/scoring part of the process, and in the process 
modified game & round setup to support selecting a question card, and the 'join' actions to 
include dealing out a hand to the player joining.  

The notes below comment on some of the things that still need to be done. (not an exhaustive list.)

I'm experimenting with factoring state transition knowledge from the handler classes (see states.py); this is something
that would particularly benefit from a design discussion.

------------------------
Some example request URLs:

In the following URLs, the callback 'url' must be specified, but is not used/needed for non-xhr testing.

INITIAL GAME SETUP

Initial setup-- have some participants join a hangout.  The call will create the hangout and game 
as necessary.  As a participant joins, a 'hand' is dealt for them. 

http://localhost:8080/api/join_game?hangout_id=123&plus_id=p111&callback=xyz
http://localhost:8080/api/join_game?hangout_id=123&plus_id=p112&callback=xyz
http://localhost:8080/api/join_game?hangout_id=123&plus_id=p113&callback=xyz

ANSWER CARD SELECTION

Starting from the above, to make card selection requests, first change the state of the created game in the admin 
console from 'new' to 'start_round'.
Then, for each participant, run a 'select_card' request as follows, where 'card_num' is set to one of the
cards in the participant's 'cards' list.
You will need to inspect the participant instance to see what cards they have.
E.g. if participant p112 has card 17 in their list:

http://localhost:8080/api/select_card?hangout_id=123&plus_id=p112&card_num=17&callback=xyz

When a participant selects a card, it will be removed from their 'cards' list, and set as their 'selected_card'.

When all participants have selected a card, the game state should change to from 'start_round' to 'voting'. This 
will happen as part of the processing of the last such selection request.

VOTING

From the 'voting' state, a participant can vote (for another participant) like so.  'plus_id' is the id of the 
user voting, and pvote is the plus_id of the participant they are voting for.  Participants can't vote for themselves.

http://localhost:8080/api/vote?hangout_id=123&plus_id=p111&pvote=p112&callback=xyz
http://localhost:8080/api/vote?hangout_id=123&plus_id=p113&pvote=p112&callback=xyz
http://localhost:8080/api/vote?hangout_id=123&plus_id=p112&pvote=p113&callback=xyz

After all particpants have voted, the game state should change from 'voting' to 'scores'.  The 'scores' processing 
will take place as part of the processing of the last such vote request, which will not return until scores processing
is done. [Note: if we want to, we can push the scores processing off to a task.]
'scores' is an internal state not accessed directly by any request handler. Another way to phrase this is that while the 
game is in the internal 'scores' state, request handlers that test for other states should just return.

In the 'scores' state, scores for the round are calculated and sent via the channel api to the 
participants. The current score calculation is probably too simplistic.
Then, one of two things happen:
 - if there are still rounds to go in the game, the round count is updated, the game is set to 'start_round', and
 a new round is set up (the participants' votes and selected cards are cleared, and a new question card for the round
 is selected at random. [Note: score history is not yet managed.]
 - if this was the last round for the game, create a new game and and set it as the current game for the hangout.
 This process includes the creation of a new set of participant instances for the new game, based on the active 
 participants in the old game [see note below]. The new game starts out in the 'new' state.


-----------------
Known current bugs:

 - Currently, every player is dealt N cards when they join (without any checks).  In addition to checking # of cards 
   left, players who join a game after it has started should probably be dealt only cards for the # of rounds left (?).
 - Similarly, need to add handling of max # of participants based on number of cards available.

-----------------
Current functionality gaps in the selection and voting handlers:

 
 - currently, there's no check when voting to see if the indicated id matches an existing participant entity for 
   that game.
 
 - Score calculation may be too simplistic. Current approach:
   - per round, simply count the number of votes the person received
   - accumulate votes over the rounds of a given game.
   - Reset the game score to zero with a new game, but the old games remain in the datastore in case we want to
     do any larger aggregate calculations for all games associated with a given hangout id.
   
 - no concept/handling of timeout or pausing
 - no checking for min required number of participants in current game/round
  - channel mgmt (see below)
 - no unit tests yet

--------------------
Questions/Issues/Design Notes:

 - As noted above, the 'GameState' design (see states.py), with state transition knowledge factored from the
handlers, is kind of a work in progress and would no doubt benefit from discussion.

 - As we discussed, it probably makes sense to create a 'handlers' module and pull them out of main.

 - to check: do we need to add retries to our transactions (in case of contention), or is this supported already by ndb?

 - currently, as participants join, they're given a randomly selected hand from the remaining cards.  Is this model 
 okay (rather than dealing out successive cards to all participants at once)? [Also, as noted above, need to make 
 sure don't run out of cards before adding someone to a game.]
 
 - Scoring metrics/history...

 - Preserving channel token (and channel id) across participant instances: As discussed, we're creating a new set 
 of child participants for each new game, based on the active participant info from the previous game. This  
 could mean that we copy the channel token and id from old to new.
 However, it may be problematic that the channel id is the id of an old participant instance.  For ex., this could
 cause problems if the channel expires.
 Instead, we might need to establish a new channel for each game ?

